{"/home/travis/build/npmtest/node-npmtest-letsencrypt/test.js":"/* istanbul instrument in package npmtest_letsencrypt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-letsencrypt/lib.npmtest_letsencrypt.js":"/* istanbul instrument in package npmtest_letsencrypt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_letsencrypt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_letsencrypt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-letsencrypt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-letsencrypt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_letsencrypt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_letsencrypt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_letsencrypt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_letsencrypt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_letsencrypt.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_letsencrypt.__dirname +\n                    '/lib.npmtest_letsencrypt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-letsencrypt/node_modules/letsencrypt/index.js":"'use strict';\n\nvar DAY = 24 * 60 * 60 * 1000;\n//var MIN = 60 * 1000;\nvar ACME = require('le-acme-core').ACME;\n\nvar LE = module.exports;\nLE.LE = LE;\n// in-process cache, shared between all instances\nvar ipc = {};\n\nfunction _log(debug) {\n  if (debug) {\n    var args = Array.prototype.slice.call(arguments);\n    args.shift();\n    args.unshift(\"[le/index.js]\");\n    console.log.apply(console, args);\n  }\n}\n\nLE.defaults = {\n  productionServerUrl: ACME.productionServerUrl\n, stagingServerUrl: ACME.stagingServerUrl\n\n, rsaKeySize: ACME.rsaKeySize || 2048\n, challengeType: ACME.challengeType || 'http-01'\n, challengeTypes: ACME.challengeTypes || [ 'http-01', 'tls-sni-01', 'dns-01' ]\n\n, acmeChallengePrefix: ACME.acmeChallengePrefix\n};\n\n// backwards compat\nObject.keys(LE.defaults).forEach(function (key) {\n  LE[key] = LE.defaults[key];\n});\n\n// show all possible options\nvar u; // undefined\nLE._undefined = {\n  acme: u\n, store: u\n, challenge: u\n, challenges: u\n, sni: u\n, httpsOptions: u\n\n, register: u\n, check: u\n\n, renewWithin: u // le-auto-sni and core\n//, renewBy: u // le-auto-sni\n, acmeChallengePrefix: u\n, rsaKeySize: u\n, challengeType: u\n, server: u\n, agreeToTerms: u\n, _ipc: u\n, duplicate: u\n, _acmeUrls: u\n};\nLE._undefine = function (le) {\n  Object.keys(LE._undefined).forEach(function (key) {\n    if (!(key in le)) {\n      le[key] = u;\n    }\n  });\n\n  return le;\n};\nLE.create = function (le) {\n  var PromiseA = require('bluebird');\n\n  le.acme = le.acme || ACME.create({ debug: le.debug });\n  le.store = le.store || require('le-store-certbot').create({ debug: le.debug });\n  le.core = require('./lib/core');\n  var log = le.log || _log;\n\n  if (!le.challenges) {\n    le.challenges = {};\n  }\n  if (!le.challenges['http-01']) {\n    le.challenges['http-01'] = require('le-challenge-fs').create({ debug: le.debug });\n  }\n  if (!le.challenges['tls-sni-01']) {\n    le.challenges['tls-sni-01'] = require('le-challenge-sni').create({ debug: le.debug });\n  }\n  if (!le.challenges['dns-01']) {\n    try {\n      le.challenges['dns-01'] = require('le-challenge-ddns').create({ debug: le.debug });\n    } catch(e) {\n      try {\n        le.challenges['dns-01'] = require('le-challenge-dns').create({ debug: le.debug });\n      } catch(e) {\n        // not yet implemented\n      }\n    }\n  }\n\n  le = LE._undefine(le);\n  le.acmeChallengePrefix = LE.acmeChallengePrefix;\n  le.rsaKeySize = le.rsaKeySize || LE.rsaKeySize;\n  le.challengeType = le.challengeType || LE.challengeType;\n  le._ipc = ipc;\n  le.agreeToTerms = le.agreeToTerms || function (args, agreeCb) {\n    agreeCb(new Error(\"'agreeToTerms' was not supplied to LE and 'agreeTos' was not supplied to LE.register\"));\n  };\n\n  if (!le.renewWithin) { le.renewWithin = 7 * DAY; }\n  // renewBy has a default in le-sni-auto\n\n  if (!le.server) {\n    throw new Error(\"opts.server must be set to 'staging' or a production url, such as LE.productionServerUrl'\");\n  }\n  if ('staging' === le.server) {\n    le.server = LE.stagingServerUrl;\n  }\n  else if ('production' === le.server) {\n    le.server = LE.productionServerUrl;\n  }\n\n  if (le.acme.create) {\n    le.acme = le.acme.create(le);\n  }\n  le.acme = PromiseA.promisifyAll(le.acme);\n  le._acmeOpts = le.acme.getOptions();\n  Object.keys(le._acmeOpts).forEach(function (key) {\n    if (!(key in le)) {\n      le[key] = le._acmeOpts[key];\n    }\n  });\n\n  if (le.store.create) {\n    le.store = le.store.create(le);\n  }\n  le.store = PromiseA.promisifyAll(le.store);\n  le.store.accounts = PromiseA.promisifyAll(le.store.accounts);\n  le.store.certificates = PromiseA.promisifyAll(le.store.certificates);\n  le._storeOpts = le.store.getOptions();\n  Object.keys(le._storeOpts).forEach(function (key) {\n    if (!(key in le)) {\n      le[key] = le._storeOpts[key];\n    }\n  });\n\n\n  //\n  // Backwards compat for <= v2.1.7\n  //\n  if (le.challenge) {\n    console.warn(\"Deprecated use of le.challenge. Use le.challenges['\" + LE.challengeType + \"'] instead.\");\n    le.challenges[le.challengeType] = le.challenge;\n  }\n\n  LE.challengeTypes.forEach(function (challengeType) {\n    var challenger = le.challenges[challengeType];\n\n    if (!challenger) {\n      return;\n    }\n\n    if (challenger.create) {\n      challenger = le.challenges[challengeType] = challenger.create(le);\n    }\n    challenger = le.challenges[challengeType] = PromiseA.promisifyAll(challenger);\n    le['_challengeOpts_' + challengeType] = challenger.getOptions();\n    Object.keys(le['_challengeOpts_' + challengeType]).forEach(function (key) {\n      if (!(key in le)) {\n        le[key] = le['_challengeOpts_' + challengeType][key];\n      }\n    });\n\n    // TODO wrap these here and now with tplCopy?\n    if (!challenger.set || 5 !== challenger.set.length) {\n      throw new Error(\"le.challenges[\" + challengeType + \"].set receives the wrong number of arguments.\"\n        + \" You must define setChallenge as function (opts, domain, token, keyAuthorization, cb) { }\");\n    }\n    if (challenger.get && 4 !== challenger.get.length) {\n      throw new Error(\"le.challenges[\" + challengeType + \"].get receives the wrong number of arguments.\"\n        + \" You must define getChallenge as function (opts, domain, token, cb) { }\");\n    }\n    if (!challenger.remove || 4 !== challenger.remove.length) {\n      throw new Error(\"le.challenges[\" + challengeType + \"].remove receives the wrong number of arguments.\"\n        + \" You must define removeChallenge as function (opts, domain, token, cb) { }\");\n    }\n    if (!challenger.loopback || 5 !== challenger.loopback.length) {\n      console.warn(\"le.challenges[\" + challengeType + \"].loopback should be defined as function (opts, domain, token, keyAuthorization, cb) { ... } and should prove (by external means) that the ACME server challenge '\" + challengeType + \"' will succeed\");\n    }\n  });\n\n  le.sni = le.sni || null;\n  if (!le.httpsOptions) {\n    le.httpsOptions = {};\n  }\n  if (!le.httpsOptions.SNICallback) {\n    if (!le.getCertificatesAsync && !le.getCertificates) {\n      if (Array.isArray(le.approveDomains)) {\n        le.approvedDomains = le.approveDomains;\n        le.approveDomains = null;\n      }\n      if (!le.approveDomains) {\n        le.approvedDomains = le.approvedDomains || [];\n        le.approveDomains = function (lexOpts, certs, cb) {\n          if (!(le.approvedDomains.length && le.email && le.agreeTos)) {\n            throw new Error(\"le-sni-auto is not properly configured. Missing one or more of approveDomains(domain, certs, callback) or approvedDomains (array), email, or agreeTos\");\n          }\n          if (lexOpts.domains.every(function (domain) {\n            return -1 !== le.approvedDomains.indexOf(domain);\n          })) {\n            lexOpts.domains = le.approvedDomains.slice(0);\n            lexOpts.email = le.email;\n            lexOpts.agreeTos = le.agreeTos;\n            return cb(null, { options: lexOpts, certs: certs });\n          }\n          log(le.debug, 'unapproved domain', lexOpts.domains, le.approvedDomains);\n          cb(new Error(\"unapproved domain\"));\n        };\n      }\n\n      le.getCertificates = function (domain, certs, cb) {\n        // certs come from current in-memory cache, not lookup\n        log(le.debug, 'le.getCertificates called for', domain, 'with certs for', certs && certs.altnames || 'NONE');\n        var opts = { domain: domain, domains: certs && certs.altnames || [ domain ] };\n\n        le.approveDomains(opts, certs, function (_err, results) {\n          if (_err) {\n            log(le.debug, 'le.approveDomains called with error', _err);\n            cb(_err);\n            return;\n          }\n\n          log(le.debug, 'le.approveDomains called with certs for', results.certs && results.certs.altnames || 'NONE', 'and options:');\n          log(le.debug, results.options);\n\n          var promise;\n\n          if (results.certs) {\n            log(le.debug, 'le renewing');\n            promise = le.core.certificates.renewAsync(results.options, results.certs);\n          }\n          else {\n            log(le.debug, 'le getting from disk or registering new');\n            promise = le.core.certificates.getAsync(results.options);\n          }\n\n          return promise.then(function (certs) { cb(null, certs); }, cb);\n        });\n      };\n    }\n    le.sni = le.sni || require('le-sni-auto');\n    if (le.sni.create) {\n      le.sni = le.sni.create(le);\n    }\n    le.httpsOptions.SNICallback = le.sni.sniCallback;\n  }\n  if (!le.httpsOptions.key || !le.httpsOptions.cert) {\n    le.httpsOptions = require('localhost.daplie.com-certificates').merge(le.httpsOptions);\n  }\n  /*\n  le.sni = PromiseA.promisifyAll(le.sni);\n  le._sniOpts = le.sni.getOptions();\n  Object.keys(le._sniOpts).forEach(function (key) {\n    if (!(key in le)) {\n      le[key] = le._sniOpts[key];\n    }\n  });\n  */\n\n  if (le.core.create) {\n    le.core = le.core.create(le);\n  }\n\n  le.renew = function (args, certs) {\n    return le.core.certificates.renewAsync(args, certs);\n  };\n\n  le.register = function (args) {\n    return le.core.certificates.getAsync(args);\n  };\n\n  le.check = function (args) {\n    // TODO must return email, domains, tos, pems\n    return le.core.certificates.checkAsync(args);\n  };\n\n  le.middleware = le.middleware || require('./lib/middleware');\n  if (le.middleware.create) {\n    le.middleware = le.middleware.create(le);\n  }\n\n  return le;\n};\n"}